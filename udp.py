# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Fri Jul  1 17:23:01 2022
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'='))